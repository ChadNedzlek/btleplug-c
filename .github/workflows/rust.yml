name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  version:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref }}
        fetch-depth: 0
    - name: Git Version
      id: version
      uses: codacy/git-version@2.7.1
      with:
        release-branch: main
    outputs:
      version: ${{ steps.version.outputs.version }}

  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

  linux-x64:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - uses: actions/checkout@v4

    - name: Build
      run: |
        rustup target add x86_64-unknown-linux-gnu --verbose
        cargo build --release --target x86_64-unknown-linux-gnu --verbose 

    - name: Apt-get pre-reqs
      run: sudo apt install libdbus-1-dev pkg-config

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: win-x64
        path: |
          target/release/*.dylib
          target/release/*.so
          target/release/*.dll
          target/release/*.pdb
        retention-days: 1

  linux-arm64:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - uses: actions/checkout@v4

    - name: Apt-get pre-reqs
      run: sudo apt-get install gcc-aarch64-linux-gnu libdbus-1-dev pkg-config

    - name: Build
      run: |
        rustup target add aarch64-unknown-linux-gnu
        cargo build \
          --verbose \
          --release \
          --target aarch64-unknown-linux-gnu \
          --config target.aarch64-unknown-linux-gnu.linker=\"aarch64-linux-gnu-gcc\"     

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: win-x64
        path: |
          target/release/*.dylib
          target/release/*.so
          target/release/*.dll
          target/release/*.pdb
        retention-days: 1

  macos-x64:
    runs-on: macos-13
    needs: [test]
    steps:
    - uses: actions/checkout@v4

    - name: Build
      run: |
        rustup target add x86_64-apple-darwin
        cargo build --release --target x86_64-apple-darwin --verbose

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: win-x64
        path: |
          target/release/*.dylib
          target/release/*.so
          target/release/*.dll
          target/release/*.pdb
        retention-days: 1

  macos-arm64:
    runs-on: macos-13
    needs: [test]
    steps:
    - uses: actions/checkout@v4

    - name: Build
      run: |
        rustup target add aarch64-apple-darwin
        cargo build --release --target aarch64-apple-darwin --verbose

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: win-x64
        path: |
          target/release/*.dylib
          target/release/*.so
          target/release/*.dll
          target/release/*.pdb
        retention-days: 1

  windows-x64:
    runs-on: windows-latest
    needs: [test]
    steps:
    - uses: actions/checkout@v4

    - name: Build
      run: |
        rustup target add x86_64-pc-windows-msvc
        cargo build --release --target x86_64-pc-windows-msvc --verbose
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: win-x64
        path: |
          target/release/*.dylib
          target/release/*.so
          target/release/*.dll
          target/release/*.pdb
        retention-days: 1

  release-and-tag:
    runs-on: ubuntu-latest
    needs: [version, linux-x64, linux-arm64, macos-x64, macos-arm64, windows-x64]
    steps:
    - name: Tag the commit
      run: |
        git config --global user.email "no-reply@vaettir.net"
        git config --global user.name "Tagger"
        git tag -a ${{ needs.jobs.version.outputs.version }} -m "Version ${{ needs.jobs.version.outputs.version }}"
        git push --follow-tags

    - uses: actions/download-artifact@v3
      with:
        path: target

    - name: Create Github Release
      run: |
        TAG="$(date -u +"v%Y.%m.%d.%H%M").${GITHUB_SHA::4}"
        
        echo "Tag: ${TAG}"
        
        echo gh release create $TAG --draft --notes "Automatically built binaries"
        
        cd target
        
        for DIR_NAME in * ; do
            cd $DIR_NAME
            chmod -R +x .
            tar -czvf $DIR_NAME.tar.gz *
            echo gh release upload $TAG $DIR_NAME.tar.gz
            cd ..
        done
        
        echo gh release edit $TAG --draft=false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
